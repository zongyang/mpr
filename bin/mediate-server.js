// Generated by LiveScript 1.3.1
(function(){
  var express, http, path, multer, fs, socket, hostConfig, cookieParser, endServerUrl, app, server, io, aDay, sessions, urlsPatternsOfWebPagesWithAtPlusMashup, getCommentPictureName, getRandomKey, prepareComments, getCommentById, __comments, batch, comments, index, getOldComments, changeLocalPictureWithServerPicture, exports;
  express = require('express');
  http = require('http');
  path = require('path');
  multer = require('multer');
  fs = require('fs');
  socket = require('socket.io');
  hostConfig = require('./host-config');
  cookieParser = require('cookie-parser');
  endServerUrl = hostConfig.endServer.url;
  app = express();
  server = http.createServer(app);
  io = socket.listen(server, {
    resource: (hostConfig.path || '.') + '/socket.io'
  });
  app.set('views', __dirname);
  app.set('view engine', 'jade');
  app.use(cookieParser());
  app.use(multer({
    dest: './temp/images'
  }));
  app.use(app.router).use(express['static'](__dirname, {
    maxAge: aDay = 24 * 60 * 60
  }));
  sessions = {};
  urlsPatternsOfWebPagesWithAtPlusMashup = [/^http:\/\/localhost:8080\/stub\.html/];
  app.get('/api/comments.json', function(req, res){
    res.json(comments);
  });
  app.post('/api/pictures', function(req, res){
    var commentId, ref$, file;
    for (commentId in ref$ = req.files) {
      file = ref$[commentId];
      fs.rename(file.path, 'bin/' + getCommentPictureName(commentId), fn$);
    }
    function fn$(error){
      if (error) {
        console.log("rename erorr: ", error);
      }
    }
  });
  getCommentPictureName = function(commentId){
    return 'public/images/' + commentId;
  };
  getRandomKey = function(){
    return '' + Date.now() + Math.random();
  };
  prepareComments = function(comments){
    var i$, len$, comment;
    for (i$ = 0, len$ = comments.length; i$ < len$; ++i$) {
      comment = comments[i$];
      comment._id = getRandomKey();
      comment.likesCount = Math.floor(Math.random() * 200);
    }
    return comments;
  };
  getCommentById = function(id){
    var i$, ref$, len$, comment;
    console.log("\n\n*************** id: " + id + ", comments length: " + comments.length + " ***************\n\n");
    for (i$ = 0, len$ = (ref$ = comments).length; i$ < len$; ++i$) {
      comment = ref$[i$];
      if (comment._id === id) {
        return comment;
      }
    }
  };
  __comments = prepareComments(require('./data'));
  batch = 30;
  comments = __comments.slice(index = __comments.length - batch, __comments.length);
  getOldComments = function(amount){
    var oldComments, comments;
    oldComments = __comments.slice(index - batch, index);
    comments = oldComments.concat(comments);
    index -= batch;
    return oldComments;
  };
  io.on('connection', function(socket){
    var usersOnPage;
    console.log("connected!");
    socket.on('request-initial', function(sessionId){
      var i$, ref$, len$, room, data;
      console.log("typeof session-id: " + typeof sessionId + ", session-id: ", sessionId);
      if (sessionId && sessions[sessionId]) {
        for (i$ = 0, len$ = (ref$ = sessions[sessionId].rooms).length; i$ < len$; ++i$) {
          room = ref$[i$];
          socket.join(room);
        }
      } else {
        sessionId = Date.now() + Math.random();
        sessions[sessionId] = {
          rooms: []
        };
        console.log("assign new session-id: ", sessionId);
      }
      socket.emit('response-initial', data = {
        user: {
          username: 'abc',
          role: 'visitor'
        },
        sessionId: sessionId
      });
    });
    socket.on('ask-comments', function(arg$, callback){
      var url, sessionId, room, error;
      url = arg$.url, sessionId = arg$.sessionId;
      room = url || 'default';
      console.log("typeof session-id: " + typeof sessionId + ", session-id: ", sessionId);
      socket.join(room);
      console.log("\n\n*************** join " + room + " ***************\n\n");
      sessions[sessionId].rooms.push(room);
      callback(error = null, {
        url: url,
        newValue: comments,
        action: 'answer'
      });
    });
    socket.on("comments-add-likes", function(arg$, callback){
      var id, url, newValue, sessionId, room, comment, likes;
      id = arg$.id, url = arg$.url, newValue = arg$.newValue, sessionId = arg$.sessionId;
      room = url || 'default';
      console.log("\n\n*************** id: " + id + ", url: " + url + ", new-value: " + newValue + " ***************\n\n");
      comment = getCommentById(id);
      if (comment) {
        likes = comment.likesCount += 1;
        socket.broadcast.to(room).emit('partial-updated-element-of-comments', {
          url: url,
          newValue: {
            id: id,
            likes: likes
          },
          action: 'partial-updated-element'
        });
        callback(null, {
          result: 'success'
        });
      }
    });
    socket.on("comments-ask-old-comments", function(arg$, callback){
      var id, url, newValue, sessionId, comments, amount;
      id = arg$.id, url = arg$.url, newValue = arg$.newValue, sessionId = arg$.sessionId;
      comments = getOldComments(amount = newValue);
      callback(null, comments);
    });
    socket.on("current-user-login", function(arg$, callback){
      var newValue, sessionId, result;
      newValue = arg$.newValue, sessionId = arg$.sessionId;
      console.log("\n\n*************** current-user-login ***************\n\n");
      result = newValue.name === 'watermelon' ? 'success' : 'failure';
      if (result === 'success') {
        newValue.id = '26bd299e-19c3-4c09-9a5b-1fb829ce4bf7';
        newValue.username = newValue.name;
        newValue.role = 'logged-user';
        newValue.accountState = 'waiting-confirmation';
        newValue.email = 'watermelon@qq.com';
        newValue.commentsCount = 0;
        newValue.likesCount = 0;
        newValue.avatar = 'assets/images/avatars/default01.png';
        delete newValue.name;
        delete newValue.password;
        callback(null, {
          newValue: newValue,
          sessionId: sessionId
        });
      } else {
        callback("error", null);
      }
    });
    socket.on("current-user-logout", function(arg$, callback){
      var newValue, sessionId;
      newValue = arg$.newValue, sessionId = arg$.sessionId;
      console.log("\n\n*************** current-user-logout ***************\n\n");
      newValue.id = '26bd299e-19c3-4c09-9a5b-1fb829ce4';
      newValue.role = 'visitor';
      newValue.username = '游客';
      newValue.accountState = 'normal';
      newValue.email = '只有未激活用户才会显示邮箱';
      newValue.commentsCount = 0;
      newValue.likesCount = 0;
      callback(null, {
        newValue: newValue,
        sessionId: sessionId
      });
    });
    socket.on("current-user-check-username", function(arg$, callback){
      var newValue, result;
      newValue = arg$.newValue;
      console.log("\n\n*************** current-user-check-username ***************\n\n");
      result = newValue.username !== 'watermelon' ? 'success' : 'failure';
      if (result === 'success') {
        callback(null, null);
      } else {
        callback("error", null);
      }
    });
    socket.on("current-user-check-email", function(arg$, callback){
      var newValue, result;
      newValue = arg$.newValue;
      console.log("\n\n*************** current-user-check-email ***************\n\n");
      result = newValue.email !== 'watermelon@qq.com' ? 'success' : 'failure';
      if (result === 'success') {
        callback(null, null);
      } else {
        callback("error", null);
      }
    });
    socket.on("current-user-register", function(arg$, callback){
      var newValue;
      newValue = arg$.newValue;
      console.log("\n\n*************** current-user-register ***************\n\n");
      newValue.role = 'logged-user';
      newValue.accountState = 'waiting-confirmation';
      newValue.commentsCount = 0;
      newValue.likesCount = 0;
      callback(null, {
        newValue: newValue
      });
    });
    socket.on("update-current-user", function(arg$){
      var newValue;
      newValue = arg$.newValue;
      console.log("\n\n*************** update-current-user ***************\n\n", newValue);
    });
    socket.on("current-user-resend-email", function(arg$, callback){
      var newValue;
      newValue = arg$.newValue;
      console.log("\n\n*************** current-user-resend-email ***************\n\n");
      callback(null, null);
    });
    socket.on("current-user-find-password", function(arg$, callback){
      var newValue;
      newValue = arg$.newValue;
      console.log("\n\n*************** current-user-find-password ***************\n\n");
      if (newValue.email === 'watermelon@qq.com') {
        callback(null, null);
      } else {
        callback('error', 'invaild email');
      }
    });
    socket.on("current-user-check-code", function(arg$, callback){
      var newValue;
      newValue = arg$.newValue;
      console.log("\n\n*************** current-user-check-code ***************\n\n");
      if (newValue.code === '123') {
        callback(null, null);
      } else {
        callback('error', null);
      }
    });
    socket.on("current-user-change-password", function(arg$, callback){
      var newValue;
      newValue = arg$.newValue;
      console.log("\n\n*************** current-user-change-password ***************\n\n");
      callback(null, null);
    });
    usersOnPage = 10;
    socket.on('add-comments', function(arg$){
      var url, newValue, action, comment, room;
      url = arg$.url, newValue = arg$.newValue, action = arg$.action;
      comment = newValue;
      room = url || 'default';
      console.log("add comment: room: " + room + ", " + newValue.textContent + ", url: " + url + ", new-value: ", newValue);
      changeLocalPictureWithServerPicture(newValue);
      comment.likesCount = 0;
      comments.push(comment);
      socket.broadcast.to(room).emit('new-comments', {
        url: url,
        newValue: newValue,
        action: action
      });
    });
    socket.on('update-element-of-comments', function(arg$){
      var url, newValue, action;
      url = arg$.url, newValue = arg$.newValue, action = arg$.action;
      console.log("update element of comments, id is: " + newValue.id + ", content: " + newValue.content);
      socket.broadcast.to(url).emit('updated-element-of-comments', {
        url: url,
        newValue: newValue,
        action: action
      });
    });
  });
  changeLocalPictureWithServerPicture = function(comment){
    if (comment.picture != null) {
      comment.picture = getCommentPictureName(comment._id);
    }
  };
  exports = module.exports = server;
  exports.use = function(){
    return app.use.apply(app, arguments);
  };
}).call(this);
