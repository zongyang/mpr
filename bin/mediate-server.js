// Generated by LiveScript 1.3.1
(function(){
  var express, http, path, multer, fs, logger, socket, hostConfig, cookieParser, bodyParser, admin, index, endServerUrl, app, server, io, aDay, sessions, exports;
  express = require('express');
  http = require('http');
  path = require('path');
  multer = require('multer');
  fs = require('fs');
  logger = require('morgan');
  socket = require('socket.io');
  hostConfig = require('./host-config');
  cookieParser = require('cookie-parser');
  bodyParser = require('body-parser');
  admin = require('./router/admin');
  index = require('./router/index');
  endServerUrl = hostConfig.endServer.url;
  app = express();
  server = http.createServer(app);
  io = socket.listen(server, {
    resource: (hostConfig.path || '.') + '/socket.io'
  });
  app.use(logger('dev'));
  app.set('views', __dirname);
  app.set('view engine', 'jade');
  app.use(cookieParser());
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({
    extended: false
  }));
  app.use(app.router).use(express['static'](__dirname, {
    maxAge: aDay = 24 * 60 * 60
  })).use('/admin', admin(app.router));
  sessions = {};
  io.on('connection', function(socket){
    console.log("connected!");
    socket.on('request-initial', function(sessionId){
      var i$, ref$, len$, room, data;
      console.log("typeof session-id: " + typeof sessionId + ", session-id: ", sessionId);
      if (sessionId && sessions[sessionId]) {
        for (i$ = 0, len$ = (ref$ = sessions[sessionId].rooms).length; i$ < len$; ++i$) {
          room = ref$[i$];
          socket.join(room);
        }
      } else {
        sessionId = Date.now() + Math.random();
        sessions[sessionId] = {
          rooms: []
        };
        console.log("assign new session-id: ", sessionId);
      }
      socket.emit('response-initial', data = {
        user: {
          username: 'abc',
          role: 'visitor'
        },
        sessionId: sessionId
      });
    });
  });
  exports = module.exports = server;
  exports.use = function(){
    return app.use.apply(app, arguments);
  };
}).call(this);
