// Generated by LiveScript 1.3.1
(function(){
  define(function(require, exports, module){
    var jquery, hammerjs, state, util, modernizr, scrollManager, Carousel;
    jquery = require('jquery');
    hammerjs = require('Hammer');
    state = require('State');
    util = require('util');
    modernizr = require('_Modernizer');
    scrollManager = require('./scroll-manager');
    return Carousel = (function(){
      Carousel.displayName = 'Carousel';
      var prototype = Carousel.prototype, constructor = Carousel;
      function Carousel(arg$){
        var name, PERCENT_OF_PANE_WIDTH;
        this.name = arg$.name, this.container = arg$.container, this.carousel = arg$.carousel, this.panesNames = arg$.panesNames, this.externalStateConfig = arg$.externalStateConfig;
        this.container = $(this.container);
        this.carousel = $(this.carousel);
        this.panes = this.carousel.find((function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = this.panesNames).length; i$ < len$; ++i$) {
            name = ref$[i$];
            results$.push("#" + name);
          }
          return results$;
        }.call(this)).join(', '));
        this.paneWidth = 0;
        this.paneAmount = this.panes.length;
        this.currentPaneIndex = 0;
        this.currentPane = State.add("carousel-" + this.name, this.panesNames);
        this.draggingThreshold = PERCENT_OF_PANE_WIDTH = 0.5;
      }
      prototype.init = function(){
        var this$ = this;
        this.setPaneDimensionsAndDisplay();
        $(window).on('load resize orientationchange', function(){
          this$.setPaneDimensionsAndDisplay();
        });
        this.showPaneAccordingToState();
        this.startChangingPanesWhenSwiping();
        scrollManager.fixDrift(this.carousel);
      };
      prototype.setPaneDimensionsAndDisplay = function(){
        var width, self;
        width = this.paneWidth = this.container.width();
        self = this;
        this.panes.each(function(index){
          if (index <= self.currentPaneIndex) {
            $(this).css('display', 'block');
          } else {
            $(this).css('display', 'none');
          }
          $(this).width(width);
        });
        this.carousel.width(this.paneWidth * (this.currentPaneIndex + 1));
      };
      prototype.showPaneAccordingToState = function(){
        var this$ = this;
        if (this.externalStateConfig) {
          this.externalStateConfig.state.observe(function(state){
            var paneName, animate;
            paneName = this$.externalStateConfig.statesPanesMap[state];
            if (paneName) {
              this$.showPane(paneName, animate = true);
            }
          });
        } else {
          this.currentPane.observe(function(paneName){
            var animate;
            this$.showPane(paneName, animate = true);
          });
        }
      };
      prototype.showPane = function(indexOrName, isAnimate){
        var index;
        if (typeof indexOrName === 'number') {
          index = Math.max(0, Math.min(indexOrName, this.paneAmount - 1));
        } else if (typeof indexOrName === 'string') {
          index = this.panesNames.findIndex(indexOrName);
        } else {
          throw new Error("index-or-name: " + indexOrName + " is neither a string nor an integer");
        }
        this.showPaneWithProperCarouselSize(index, isAnimate);
      };
      prototype.showPaneWithProperCarouselSize = function(index, isAnimate){
        var direction;
        if (index === this.currentPaneIndex) {
          return;
        }
        direction = index > this.currentPaneIndex ? 'left' : 'right';
        if (direction === 'left') {
          this.enlargeCarouselAndShowRightPanes(index);
        }
        this.revealPane(index, isAnimate);
        if (direction === 'right') {
          this.shrinkCarouselAndHideRightPanes;
        }
      };
      prototype.enlargeCarouselAndShowRightPanes = function(index){
        var i, ref$, pane;
        this.carousel.width(this.paneWidth * (index + 1));
        for (i in ref$ = this.panes) {
          pane = ref$[i];
          if (i <= index) {
            $(pane).css('display', 'block');
          }
        }
      };
      prototype.revealPane = function(index, isAnimate){
        this.currentPaneIndex = index;
        console.log("show-pane: ", this.currentPaneIndex);
        this.adjustPanesHeightToAviodScrollToWhiteSpace();
        this.carousel.removeClass('animate');
        if (isAnimate) {
          this.carousel.addClass('animate');
        }
        this.carousel.css('left', -(this.paneWidth * this.currentPaneIndex) + 'px');
      };
      prototype.shrinkCarouselAndHideRightPanes = function(){
        var i, ref$, pane;
        for (i in ref$ = this.panes) {
          pane = ref$[i];
          if (i > this.currentPaneIndex) {
            $(pane).css('display', 'none');
          }
        }
        this.carousel.width(this.paneWidth * (this.currentPaneIndex + 1));
      };
      prototype.startChangingPanesWhenSwiping = function(){
        var gestureRecognizer, this$ = this;
        gestureRecognizer = new Hammer(this.container[0], {
          dragLockToAxis: true,
          preventDefault: true
        });
        gestureRecognizer.on('swipeleft swiperight', function(ev){
          if (this$.isPermitHandle()) {
            this$.swipeEvent = ev;
            ev.preventDefault();
            switch (ev.type) {
            case 'swipeleft':
              this$.next();
              break;
            case 'swiperight':
              this$.prev();
            }
          }
        });
      };
      prototype.isPermitHandle = function(){
        if (typeof this.externalStateConfig === 'undefined') {
          return true;
        }
        return in$(this.externalStateConfig.state(), this.externalStateConfig.carouselableStates);
      };
      prototype.next = function(){
        this.goPane(this.panesNames[Math.min(this.panes.length - 1, this.currentPaneIndex + 1)]);
      };
      prototype.goPane = function(paneName){
        if (this.externalStateConfig) {
          this.externalStateConfig.state(util.getKeyOfValue(this.externalStateConfig.statesPanesMap, paneName));
        } else {
          this.currentPane(paneName);
        }
      };
      prototype.prev = function(){
        this.goPane(this.panesNames[Math.max(0, this.currentPaneIndex - 1)]);
      };
      prototype.adjustPanesHeightToAviodScrollToWhiteSpace = function(){
        var currentPane;
        currentPane = $(this.panes[this.currentPaneIndex]);
        currentPane.css('height', 'auto');
        this.panes.each(function(){
          if (this !== currentPane.get(0)) {
            return $(this).css('height', currentPane.css('height'));
          }
        });
      };
      return Carousel;
    }());
  });
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
