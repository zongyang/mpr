// Generated by LiveScript 1.3.1
(function(){
  define(function(require, exports, module){
    var util, state;
    util = require('util');
    state = require('state');
    return {
      scrollContainer: $(window),
      extendScrollEvent: function(){
        var oldScroll;
        oldScroll = $.fn.scroll;
        $.fn.scroll = function(data, fn){
          var oldFn, lastScrollTop, lastDirection, newFn;
          oldFn = typeof fn === 'function' ? fn : data;
          console.log('old-fn: ', oldFn);
          lastScrollTop = 0;
          lastDirection = null;
          newFn = function(event){
            var currentScrollTop;
            currentScrollTop = $(this).scrollTop();
            event.direction = (function(){
              switch (false) {
              case !(currentScrollTop > lastScrollTop):
                return 'down';
              case currentScrollTop !== lastScrollTop:
                return lastDirection;
              case !(currentScrollTop < lastScrollTop):
                return 'up';
              }
            }());
            lastScrollTop = currentScrollTop;
            lastDirection = event.direction;
            return oldFn(event);
          };
          if (typeof fn === 'function') {
            return oldScroll.call(this, data, newFn);
          } else {
            return oldScroll.call(this, newFn);
          }
        };
      },
      scrollTop: function(){
        return this.scrollContainer.scrollTop.apply(this.scrollContainer, arguments);
      },
      scroll: function(){
        return this.scrollContainer.scroll.apply(this.scrollContainer, arguments);
      },
      scrollContainerHeight: function(){
        return $('#comment').height();
      },
      isAtLastScreen: function(){
        return this.scrollTop() > this.scrollContainerHeight() - 2 * $(window).height();
      },
      addConditionForPreventAppPageChangeWhenClickNavigatorBackButton: function(conditionFn){
        var oldFn;
        oldFn = window.isAtPlusNavigatorBackDisabled;
        window.isAtPlusNavigatorBackDisabled = function(){
          return (typeof oldFn == 'function' ? oldFn() : void 8) || conditionFn();
        };
      },
      enableBackNavigation: function(){
        var isOnpopstateCausedChange;
        isOnpopstateCausedChange = null;
        state.appPage.observe(function(currentPage){
          if (!isOnpopstateCausedChange) {
            history.pushState({
              page: currentPage
            });
          }
          isOnpopstateCausedChange = false;
        });
        window.onpopstate = function(event){
          if (event.state != null) {
            if (!window.isAtPlusNavigatorBackDisabled()) {
              state.appPage(event.state.page);
            }
            isOnpopstateCausedChange = true;
          }
        };
      },
      createWidget: function(spec){
        var widget;
        if (spec.name != null && spec.statesAppPagesMap != null) {
          widget = import$({
            activate: function(){},
            bindData: function(){}
          }, spec);
          widget.state = 'hidden';
          widget.setState = function(state){
            this.state = state;
            $('#' + this.name).attr('class', this.state.replace(/\./g, ' '));
          };
          widget.startStatesChanging = function(){
            var this$ = this;
            state.appPage.observe(function(page){
              var widgetState, ref$, appPages;
              for (widgetState in ref$ = this$.statesAppPagesMap || {}) {
                appPages = ref$[widgetState];
                if (in$(page, appPages)) {
                  this$.setState(widgetState);
                  return;
                }
              }
              this$.setState('hidden');
            });
            state.appPage(state.appPage());
          };
          widget.activate = widget.activate.decorate({
            before: widget.startStatesChanging,
            after: widget.bindData
          });
          return widget;
        } else {
          throw new Error('widget spec must have name and states-app-pages-map ');
        }
      }
    };
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
